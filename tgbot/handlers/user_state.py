from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from tgbot.keyboards.reply import menu
from tgbot.misc.states import QuestionState, SuggestState
from tgbot.services.mail_sender import send_email

state_router = Router()


@state_router.message(QuestionState.ask_question)
async def ask_question(message: Message, state: FSMContext):
    print(message.chat.full_name)
    is_connect_success = await send_email(
        "–í–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç {} ({})".format(
            message.chat.full_name, message.chat.username
        ),
        message.text,
    )
    if is_connect_success:
        await message.answer(
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=menu
        )
    else:
        await message.answer(
            text="üî¥–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∑–∂–µ.",
            reply_markup=menu,
        )
    await state.clear()

@state_router.message(SuggestState.give_suggest)
async def ask_question(message: Message, state: FSMContext):
    # print(message.chat.full_name)
    is_connect_success = await send_email(
        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–∏–∑–Ω–µ—Å—É –æ—Ç {} ({})".format(
            message.chat.full_name, message.chat.username
        ),
        message.text,
    )
    if is_connect_success:
        await message.answer(
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=menu
        )
    else:
        await message.answer(
            text="üî¥–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∑–∂–µ.",
            reply_markup=menu,
        )
    await state.clear()
